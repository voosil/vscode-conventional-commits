{
  "extension.name": "Conventional Commits",
  "extension.commands.resetGlobalState": "Conventional Commits: Reset Global State",
  "extension.commands.showNewVersionNotes": "Conventional Commits: Show Version Notes",
  "extension.configuration.autoCommit.markdownDescription": "Control whether the extension should commit files after: forming the message or closing the editor tab.\n\nWhen `#git.enableSmartCommit#` enabled and `#git.smartCommitChanges#` was set to `all`, It allows to commit all changes when there are no staged changes.\n\nAnd set `#git.postCommitCommand#` to `sync` to run `git.sync` after commit.",
  "extension.configuration.silentAutoCommit.markdownDescription": "Control that auto commit should be silent, without focusing source control panel.",
  "extension.configuration.emojiFormat.markdownDescription": "Specify which format will be shown in the `gitmoji`.",
  "extension.configuration.emojiFormat.markdownEnumDescriptions.code": "Display as `:bug:`",
  "extension.configuration.emojiFormat.markdownEnumDescriptions.emoji": "Display as `üêõ`",
  "extension.configuration.gitmoji.markdownDescription": "Control whether the extension should prompt for a `gitmoji`.",
  "extension.configuration.lineBreak.markdownDescription": "Specify which word will be treated as line breaks in the `body`.\n\nBlank means no line breaks.",
  "extension.configuration.promptBody.markdownDescription": "Control whether the extension should prompt for the `body` section.",
  "extension.configuration.promptFooter.markdownDescription": "Control whether the extension should prompt for the `footer` section.",
  "extension.configuration.promptScopes.markdownDescription": "Control whether the extension should prompt for the `scope` section.",
  "extension.configuration.promptCI.markdownDescription": "Control whether the extension should prompt for skipping CI run.",
  "extension.configuration.scopes.markdownDescription": "Specify available selections in the `scope` section.",
  "extension.configuration.showEditor.markdownDescription": "Control whether the extension should show the commit message as a text document in a separate tab.",
  "extension.configuration.showNewVersionNotes.markdownDescription": "Control whether the extension should show the new version notes.",
  "extension.configuration.editor.keepAfterSave.markdownDescription": "Control whether the extension should keep the editor tab open, after saving the commit message.",
  "extension.configuration.useNxScopes": "Use nx scopes or not.",
  "extension.configuration.nxdir": "Nx workspace directory.",
  "extension.configuration.scopeClassificationKey": "The key for scopes classification.",
  "extension.configuration.unclassifiedName": "If no specification is made as to the category of scope, the following classifications will be used.",
  "extension.configuration.scopeListOrder": "The priority of scope displayed in the list, the smaller the value, the higher the priority.",
  "extension.sources.repositoryNotFoundInPath": "Repository not found in path: ",
  "extension.sources.repositoriesEmpty": "Please open a repository.",
  "extension.sources.promptRepositoryPlaceholder": "Choose a repository.",
  "extension.sources.vscodeGitNotFound": "vscode.git is not enabled.",
  "extension.sources.prompt.fromWorkspaceConfiguration": "From workspace configuration.",
  "extension.sources.prompt.type.placeholder": "Select the type of change that you're committing.",
  "extension.sources.prompt.type.fromCommitlintConfig": "From commitlint config.",
  "extension.sources.prompt.scope.placeholder": "Select the scope of this change.",
  "extension.sources.prompt.scope.noneItem.label": "None",
  "extension.sources.prompt.scope.noneItem.detail": "No scope.",
  "extension.sources.prompt.scope.newItem.label": "New scope",
  "extension.sources.prompt.scope.newItem.detail": "Add a new workspace scope. (You can manage scopes in workspace `settings.json`.)",
  "extension.sources.prompt.scope.newItem.placeholder": "Create a new scope.",
  "extension.sources.prompt.scope.newItemWithoutSetting.label": "New scope (only use once)",
  "extension.sources.prompt.scope.newItemWithoutSetting.detail": "Use a new scope. (The scope will not be added in workspace `settings.json`.)",
  "extension.sources.prompt.gitmoji.placeholder": "Choose a gitmoji.",
  "extension.sources.prompt.gitmoji.noneItem.label": "None",
  "extension.sources.prompt.gitmoji.noneItem.detail": "No gitmoji.",
  "extension.sources.prompt.subject.placeholder": "Write a short, imperative tense description of the change.",
  "extension.sources.prompt.ci.accept.label": "Yes",
  "extension.sources.prompt.ci.decline.label": "No",
  "extension.sources.prompt.ci.accept.detail": "Avoid running CI worflow.",
  "extension.sources.prompt.ci.decline.detail": "Run CI workflow if available.",
  "extension.sources.prompt.ci.placeholder": "Choose do you want to skip CI run.",
  "extension.sources.prompt.subject.error.including": "including ",
  "extension.sources.prompt.subject.error.type": "type: ",
  "extension.sources.prompt.subject.error.scope": "scope: ",
  "extension.sources.prompt.subject.error.gitmoji": "gitmoji: ",
  "extension.sources.prompt.body.placeholder": "Provide a longer description of the change.",
  "extension.sources.prompt.footer.placeholder": "List any breaking changes or issues closed by this change.",
  "extension.sources.output.welcomeNewVersion": "Welcome to use new version",
  "extension.sources.output.showReleaseNotes": "Show release notes",
  "extension.sources.output.dontShowThisAgain": "Don't show this again",
  "extension.sources.resetMessage": "Reset Global state successfully!"
}
